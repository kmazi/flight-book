# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
    build:
        docker:
        # specify the version you desire here
        # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
        - image: circleci/python:3.6.6
          environment:
            PIPENV_VENV_IN_PROJECT: true
            DATABASE_URL: postgresql://touchstone@localhost/flight_test?sslmode=disable
        - image: circleci/postgres:9.6.4
          environment:
            POSTGRES_USER: touchstone
            POSTGRES_DB: flight_test

        # Specify service dependencies here if necessary
        # CircleCI maintains a library of pre-built images
        # documented at https://circleci.com/docs/2.0/circleci-images/
        # - image: circleci/postgres:9.4

        working_directory: ~/flight-book

        steps:
        - checkout
        - run: sudo chown -R circleci:circleci /usr/local/bin
        - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
        - restore_cache:  # ensure this step occurs *before* installing dependencies
            key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

        - run:
            name: install dependencies
            command: |
                sudo pip install pipenv --upgrade pip
                pipenv install --dev

        - save_cache:
            paths:
                - "./venv"
                - "/usr/local/bin"
                - "/usr/local/lib/python3.6/site-packages"
            key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

        # run tests!
        # this example uses Django's built-in test-runner
        # other common Python testing frameworks include pytest and nose
        # https://pytest.org
        # https://nose.readthedocs.io
        # - run:
        #     name: run tests
        #     command: pipenv run py.test --cov
        - run:
            name: Run coverage
            command: pipenv run coverage run --source api,user -m py.test

        - run:
            name: Report coverage
            command: |
                pipenv run coverage report
                pipenv run coverage html
                pipenv run coveralls

        - store_artifacts:
            path: htmlcov

workflows:
    version: 2
    workflows:
        jobs:
        - build
